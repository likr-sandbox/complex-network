{"version":3,"sources":["pages/Root/graph.worker.js","pages/Root/graph.js","pages/Root/NetworkChart.js","pages/Root/DegreeDistributionChart.js","pages/Root/index.js","App.js","index.js"],"names":["addMethods","require","methods","module","exports","w","Worker","__webpack_public_path__","name","mod","worker","Graph","ptr","this","graphNew","graphNodeCount","graphEdgeCount","u","graphNode","obj","graphUpdateNode","e","graphEdge","graphUpdateEdge","graphToJSON","randomScaleFreeGraph","n","c","gamma","a","degreeCentrality","graph","histogram","x","bins","minX","maxX","nodelink","toJSON","data","nodes","node","id","toString","radius","links","link","source","target","distance","NetworkChart","useState","setData","useEffect","then","style","width","height","margin","top","right","bottom","left","iterations","repulsivity","nodeColor","nodeBorderColor","nodeBorderWidth","linkColor","motionStiffness","motionDamping","degreeDistribution","centrality","maxDegree","Math","max","forEach","item","i","x0","toFixed","DegreeDistributionChart","keys","indexBy","padding","colors","scheme","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","format","length","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","from","modifiers","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","animate","getGraph","RootPage","setGraph","history","createBrowserHistory","App","path","component","Root","exact","render","document","getElementById"],"mappings":"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","file":"static/js/main.543ee6ad.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"graphNew\",\"graphNodeCount\",\"graphEdgeCount\",\"graphNode\",\"graphUpdateNode\",\"graphEdge\",\"graphUpdateEdge\",\"graphToJSON\",\"randomGraph\",\"randomTree\",\"randomScaleFreeGraph\",\"configurationModel\",\"diameter\",\"componentCount\",\"triangles\",\"degreeCentrality\",\"closenessCentrality\",\"pagerank\",\"histogram\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"a6f01df4f9eb33cccd6b.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import worker from \"./graph.worker\";\n\nconst mod = worker();\n\nexport class Graph {\n  static async create() {\n    const ptr = await mod.graphNew();\n    return new Graph(ptr);\n  }\n\n  constructor(ptr) {\n    this.ptr = ptr;\n  }\n\n  async nodeCount() {\n    return mod.graphNodeCount(this.ptr);\n  }\n\n  async edgeCount() {\n    return mod.graphEdgeCount(this.ptr);\n  }\n\n  async node(u) {\n    return mod.graphNode(this.ptr, u);\n  }\n\n  async updateNode(u, obj) {\n    return mod.graphUpdateNode(this.ptr, u, obj);\n  }\n\n  async edge(e) {\n    return mod.graphEdge(this.ptr, e);\n  }\n\n  async updateEdge(e, obj) {\n    return mod.graphUpdateEdge(this.ptr, e, obj);\n  }\n\n  async toJSON() {\n    return mod.graphToJSON(this.ptr);\n  }\n}\n\nexport const randomGraph = async (n, p) => {\n  return new Graph(await mod.randomGraph(n, p));\n};\n\nexport const randomTree = async (n) => {\n  return new Graph(await mod.randomTree(n));\n};\n\nexport const randomScaleFreeGraph = async (n, c, gamma) => {\n  return new Graph(await mod.randomScaleFreeGraph(n, c, gamma));\n};\n\nexport const configurationModel = async (degrees) => {\n  return new Graph(await mod.configurationModel(degrees));\n};\n\nexport const diameter = async (graph) => {\n  return mod.diameter(graph.ptr);\n};\n\nexport const componentCount = async (graph) => {\n  return mod.componentCount(graph.ptr);\n};\n\nexport const triangles = async (graph) => {\n  return mod.triangles(graph.ptr);\n};\n\nexport const degreeCentrality = async (graph) => {\n  return mod.degreeCentrality(graph.ptr);\n};\n\nexport const closenessCentrality = async (graph) => {\n  return mod.closenessCentrality(graph.ptr);\n};\n\nexport const pagerank = async (graph, d, iter) => {\n  return mod.pagerank(graph.ptr, d, iter);\n};\n\nexport const histogram = async (x, bins, minX, maxX) => {\n  return mod.histogram(x, bins, minX, maxX);\n};\n","import React, { useEffect, useState } from \"react\";\nimport { ResponsiveNetwork } from \"@nivo/network\";\n\nconst nodelink = async (graph) => {\n  const data = await graph.toJSON();\n  for (const node of data.nodes) {\n    node.id = node.id.toString();\n    node.radius = 3;\n  }\n  for (const link of data.links) {\n    link.source = link.source.toString();\n    link.target = link.target.toString();\n    link.distance = 30;\n  }\n  return data;\n};\n\nconst NetworkChart = ({ graph }) => {\n  const [data, setData] = useState({ nodes: [], links: [] });\n  useEffect(() => {\n    nodelink(graph).then((data) => {\n      setData(data);\n    });\n  }, [graph]);\n  return (\n    <div style={{ width: \"1200px\", height: \"1200px\" }}>\n      <ResponsiveNetwork\n        nodes={data.nodes}\n        links={data.links}\n        margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n        iterations={180}\n        repulsivity={30}\n        nodeColor=\"green\"\n        nodeBorderColor=\"none\"\n        nodeBorderWidth={1}\n        linkColor=\"#ccc\"\n        motionStiffness={160}\n        motionDamping={12}\n      />\n    </div>\n  );\n};\n\nexport default NetworkChart;\n","import React, { useEffect, useState } from \"react\";\nimport { ResponsiveBar } from \"@nivo/bar\";\nimport * as mod from \"./graph\";\n\nconst degreeDistribution = async (graph) => {\n  const centrality = await mod.degreeCentrality(graph);\n  const maxDegree = Math.max(...centrality);\n  const bins = await mod.histogram(centrality, maxDegree + 1, 0, maxDegree + 1);\n  bins.forEach((item, i) => {\n    item.x = item.x0.toFixed(0);\n  });\n  return bins;\n};\n\nconst DegreeDistributionChart = ({ graph }) => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    if (graph) {\n      degreeDistribution(graph).then((data) => {\n        setData(data);\n      });\n    }\n  }, [graph]);\n  return (\n    <ResponsiveBar\n      data={data}\n      keys={[\"y\"]}\n      indexBy=\"x\"\n      margin={{ top: 50, right: 130, bottom: 50, left: 80 }}\n      padding={0.3}\n      colors={{ scheme: \"nivo\" }}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Degree\",\n        legendPosition: \"middle\",\n        legendOffset: 32,\n        format: (x) => {\n          if (data.length < 50 || +x % 10 === 0) {\n            return x;\n          } else {\n            return \"\";\n          }\n        },\n      }}\n      axisLeft={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Frequency\",\n        legendPosition: \"middle\",\n        legendOffset: -60,\n      }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\n      legends={[\n        {\n          dataFrom: \"keys\",\n          anchor: \"bottom-right\",\n          direction: \"column\",\n          justify: false,\n          translateX: 120,\n          translateY: 0,\n          itemsSpacing: 2,\n          itemWidth: 100,\n          itemHeight: 20,\n          itemDirection: \"left-to-right\",\n          itemOpacity: 0.85,\n          symbolSize: 20,\n          effects: [\n            {\n              on: \"hover\",\n              style: {\n                itemOpacity: 1,\n              },\n            },\n          ],\n        },\n      ]}\n      animate={true}\n      motionStiffness={90}\n      motionDamping={15}\n    />\n  );\n};\n\nexport default DegreeDistributionChart;\n","import React, { useEffect, useState } from \"react\";\nimport * as mod from \"./graph\";\nimport NetworkChart from \"./NetworkChart\";\nimport DegreeDistributionChart from \"./DegreeDistributionChart\";\n\nconst getGraph = async () => {\n  return mod.randomScaleFreeGraph(1000, 1, 2);\n};\n\nconst RootPage = () => {\n  const [graph, setGraph] = useState(null);\n  useEffect(() => {\n    getGraph().then((graph) => {\n      setGraph(graph);\n    });\n  }, []);\n  if (graph == null) {\n    return <p>loading</p>;\n  }\n  return (\n    <div>\n      <div style={{ width: \"1200px\", height: \"1200px\" }}>\n        <NetworkChart graph={graph} />\n      </div>\n      <div style={{ width: \"1200px\", height: \"400px\" }}>\n        <DegreeDistributionChart graph={graph} />\n      </div>\n    </div>\n  );\n};\n\nexport default RootPage;\n","import React from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport Root from \"./pages/Root\";\n\nconst history = createBrowserHistory();\n\nconst App = () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path=\"/\" component={Root} exact />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import \"./index.css\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.getElementById(\"content\"));\n"],"sourceRoot":""}